<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta charset="utf-8">
		
		<title>Homework Turnin</title>
		<style type="text/css">
/* Grade-It homework turnin page style sheet */

a {
	color: #aa4400;
	text-decoration: none;
}

a:hover {
	background-color: #FFFF99;
	text-decoration: underline;
}

a img {
	border-width: 0;
}

.aside {
	font-size: small;
}

body {
	background-color: #ffffff;
	color: #000000;
	font-family: "Lucida Grande", "Lucida Sans Unicode", "Lucida", "Helvetica Neue", "Helvetica", Verdana, Arial, sans-serif;
	font-size: 10pt;
	padding: 1em;
}

#cheatpolicyexplain {
	color: #800;
	font-weight: bold;
}

.cheatwarning {
	text-indent: -2em;
	margin-left: 3em;
}

.deemphasized {
	color: #666666;
}

dt {
	font-weight: bold;
}

.emphasized {
	font-weight: bold;
}

.error, .errorfixed {
	background-color: #FFFFDD;
	border: thin solid gray;
	font-weight: bold;
}

.error {
	color: red;
}

.errorfixed {
	color: #000099;
}

#errormessage, .error, #warningmessage, .warning {
	font-size: 110%;
	padding-left: 1em;
	padding-right: 1em;
	padding-top: 0.5em;
	padding-bottom: 0.5em;
	margin: 1em;
}

#errormessage, .error {
	background-color: #ffe8e8;
	border: 3px solid #777777;
	color: red;
	font-size: larger;
}

.excitingnews {
	background-color: #eeeeff;
	border: 2px dashed #00AA00;
	overflow: hidden;
	padding-left: 1em;
	padding-right: 1em;
}

.filename {
	text-decoration: none;
}

form, #main {
	padding-top: 1em;
	padding-left: 1em;
	padding-right: 1em;
	margin-left: auto;
	margin-right: auto;
	max-width: 70em;
}

form td, form th {
	padding-top: 0.3em;
}

h1 {
	margin: 0em;
	/* margin-top: 0.25em; */
	padding-top: 0.25em;
}

.highlight {
	background-color: yellow;
}

img {
	vertical-align: bottom;
}

img.icon {
	height: 16px;
	width: 16px;
	vertical-align: baseline;
}

img.imageicon, img.sidebaricon {
	border: none;
	height: 16px;
	width: 16px;
	vertical-align: middle;
}

.leftcolumn {
	padding-right: 20px;
	text-align: left;
	vertical-align: top;
	width: 150px;
}

#loading {
	display: none;
}

.noteslist li {
	margin-bottom: 0.5em;
}

.saveforyourrecords {
	background-color: #ffc;
	border: 1px dashed red;
	padding: 0.5em;
}

.separated {
	padding-bottom: 2em;
}

.separatedtop {
	padding-top: 2em;
}

.success {
	color: #070;
	font-size: 200%;
	font-weight: bold;
}

.acceptedproblems {
	color: #730;
	font-size: 200%;
	font-weight: bold;
}

table {
	margin: 0px;
	padding: 0px;
	border-width: 0px;
	color: #000000;
	font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
}

td, th {
	vertical-align: top;
	white-space: nowrap;
}

td.spaced {
	padding-right: 20px;
}

tr.evenrow {
	background-color: #EEEEEE;
}

.turninlink {
	background-color: #EEEEEE;
	border: 2px solid #CCCCCC;
	float: right;
	margin-right: 1em;
	padding: 0.5em;
}

.urgent {
	color: #990000;
	font-weight: bold;
}

/* ------------------- */
button:hover, input[type="submit"]:hover {
	color: #666600;
}

h1 {
	padding: 0em;
	padding-top: 0.25em;
	text-align: center;
}

h2 {
	line-height: 16pt;
}

h2.spaced {
	margin-top: 2em;
}

.invalid {
	background-color: #ffff00;
}

#warningmessage, .warning {
	background-color: #fff8dd;
	border: 3px solid rgb(125, 85, 0) /* rgb(205, 135, 0) */;
	color: rgb(125, 85, 0);
	font-size: larger;
}

#errormessage p, #warningmessage p, .warning p {
	margin-top: 0.25em;
	margin-bottom: 0.25em;
}

.failure {
	color: red;
	font-weight: bold;
}

.filename {
	font-family: monospace;
}

hr {
	margin-top: 2em;
}

input[type="submit"] {
	font-family: Arial, sans-serif;
	font-size: 18pt;
	font-weight: bold;
	padding-left: 2em;
	padding-right: 2em;
}

.nametable {
	 border: none;
	 border-collapse: collapse;
	 margin: 0em;
	 padding: 0em;
}

.nametable td, .nametable th, td.filename {
	padding-right: 0.5em;
}

#submitarea {
	margin-bottom: 2em;
	margin-top: 2em;
	text-align: center;
}

.surveyarea, .tabcell {
	display: none;
}

th {
	padding-right: 2em;
	text-align: left;
}

/* */
body, html {
	margin: 0;
	padding: 0;
}

.codefile {
	border: 2px solid #2F6FAB;
	margin-bottom: 1em;
	padding: 0;
}

.codefile h2 {
	background-color: #2F6FAB;
	color: white;
	margin: 0;
	padding: 0 0.5em 0.25em;
}

.codefile pre, .codefile xmp {
	background-color: #F9F9F9;
	line-height: 1.05em;
	margin: 0;
	padding: 0.75em;
	overflow: auto;
}

.columnlabel {
	float: left;
	font-weight: bold;
	width: 9em;
}

.errormessage, .warningmessage {
	background-color: #FFEEEE;
	border: 2px dashed red;
	margin-left: 2em;
	margin-right: 2em;
	padding-left: 1em;
	padding-right: 1em;
	padding-top: 0.5em;
	padding-bottom: 0.5em;
}

.errormessage h2, .warningmessage h2 {
	color: red;
	font-size: larger;
}

.errormessage pre {
	font-size: larger;
	font-weight: bold;
}

h1 {
	background-color: #EEEEEE;
	border-bottom: 2px solid gray;
	text-align: center;
}

h1, h2, h3 {
	white-space: nowrap;
}

.info {
	text-align: center;
}

#main {
	padding-left: 1em;
	padding-right: 1em;
}

#studentinfoheader {
	font-size: 12pt;
	font-weight: normal;
	margin-left: auto;
	margin-right: auto;
	min-width: 20em;
	width: 20em;
}

.tooltip {
	background-color: #FFFFAA;
	border: 1px solid #999999;
	margin: 0.5em;
}

.warningmessage {
	background-color: #FFFFDD;
	border: 2px dashed yellow;
	padding-left: 1em;
	padding-right: 1em;
}

/* geshi styles */
.codefile .imp {font-weight: bold; color: red;}
.codefile li, .codefile .li1 {font-weight: normal; vertical-align:top;}
.codefile .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.codefile .li2 {font-weight: bold; vertical-align:top;}
.codefile .kw1 {color: #000088; font-weight: bold;}
.codefile .kw2 {color: #000088; font-weight: bold;}
.codefile .kw1 {color: #000000;  font-weight: bold;}
.codefile .kw2 {color: #000000; font-weight: bold;}
.codefile .kw3 {color: #006600; font-weight: bold;}
.codefile .kw4 {color: #006600; font-weight: bold;}
.codefile .kw5 {color: #003399; font-weight: bold;}
.codefile .kw6 {color: #003399; font-weight: bold;}
.codefile .kw7 {color: #003399; font-weight: bold;}
.codefile .kw8 {color: #003399; font-weight: bold;}
.codefile .kw9 {color: #003399; font-weight: bold;}
.codefile .kw10 {color: #003399; font-weight: bold;}
.codefile .kw11 {color: #003399; font-weight: bold;}
.codefile .kw12 {color: #003399; font-weight: bold;}
.codefile .kw13 {color: #003399; font-weight: bold;}
.codefile .kw14 {color: #003399; font-weight: bold;}
.codefile .kw15 {color: #003399; font-weight: bold;}
.codefile .kw16 {color: #003399; font-weight: bold;}
.codefile .kw17 {color: #003399; font-weight: bold;}
.codefile .kw18 {color: #003399; font-weight: bold;}
.codefile .kw19 {color: #003399; font-weight: bold;}
.codefile .kw20 {color: #003399; font-weight: bold;}
.codefile .kw21 {color: #003399; font-weight: bold;}
.codefile .kw22 {color: #003399; font-weight: bold;}
.codefile .kw23 {color: #003399; font-weight: bold;}
.codefile .kw24 {color: #003399; font-weight: bold;}
.codefile .kw25 {color: #003399; font-weight: bold;}
.codefile .kw26 {color: #003399; font-weight: bold;}
.codefile .kw27 {color: #003399; font-weight: bold;}
.codefile .kw28 {color: #003399; font-weight: bold;}
.codefile .kw29 {color: #003399; font-weight: bold;}
.codefile .kw30 {color: #003399; font-weight: bold;}
.codefile .kw31 {color: #003399; font-weight: bold;}
.codefile .kw32 {color: #003399; font-weight: bold;}
.codefile .kw33 {color: #003399; font-weight: bold;}
.codefile .kw34 {color: #003399; font-weight: bold;}
.codefile .kw35 {color: #003399; font-weight: bold;}
.codefile .kw36 {color: #003399; font-weight: bold;}
.codefile .kw37 {color: #003399; font-weight: bold;}
.codefile .kw38 {color: #003399; font-weight: bold;}
.codefile .kw39 {color: #003399; font-weight: bold;}
.codefile .kw40 {color: #003399; font-weight: bold;}
.codefile .kw41 {color: #003399; font-weight: bold;}
.codefile .kw42 {color: #003399; font-weight: bold;}
.codefile .kw43 {color: #003399; font-weight: bold;}
.codefile .kw44 {color: #003399; font-weight: bold;}
.codefile .kw45 {color: #003399; font-weight: bold;}
.codefile .kw46 {color: #003399; font-weight: bold;}
.codefile .kw47 {color: #003399; font-weight: bold;}
.codefile .kw48 {color: #003399; font-weight: bold;}
.codefile .kw49 {color: #003399; font-weight: bold;}
.codefile .kw50 {color: #003399; font-weight: bold;}
.codefile .kw51 {color: #003399; font-weight: bold;}
.codefile .kw52 {color: #003399; font-weight: bold;}
.codefile .kw53 {color: #003399; font-weight: bold;}
.codefile .kw54 {color: #003399; font-weight: bold;}
.codefile .kw55 {color: #003399; font-weight: bold;}
.codefile .kw56 {color: #003399; font-weight: bold;}
.codefile .kw57 {color: #003399; font-weight: bold;}
.codefile .kw58 {color: #003399; font-weight: bold;}
.codefile .kw59 {color: #003399; font-weight: bold;}
.codefile .kw60 {color: #003399; font-weight: bold;}
.codefile .kw61 {color: #003399; font-weight: bold;}
.codefile .kw62 {color: #003399; font-weight: bold;}
.codefile .kw63 {color: #003399; font-weight: bold;}
.codefile .kw64 {color: #003399; font-weight: bold;}
.codefile .kw65 {color: #003399; font-weight: bold;}
.codefile .kw66 {color: #003399; font-weight: bold;}
.codefile .kw67 {color: #003399; font-weight: bold;}
.codefile .kw68 {color: #003399; font-weight: bold;}
.codefile .kw69 {color: #003399; font-weight: bold;}
.codefile .kw70 {color: #003399; font-weight: bold;}
.codefile .kw71 {color: #003399; font-weight: bold;}
.codefile .kw72 {color: #003399; font-weight: bold;}
.codefile .kw73 {color: #003399; font-weight: bold;}
.codefile .kw74 {color: #003399; font-weight: bold;}
.codefile .kw75 {color: #003399; font-weight: bold;}
.codefile .kw76 {color: #003399; font-weight: bold;}
.codefile .kw77 {color: #003399; font-weight: bold;}
.codefile .kw78 {color: #003399; font-weight: bold;}
.codefile .kw79 {color: #003399; font-weight: bold;}
.codefile .kw80 {color: #003399; font-weight: bold;}
.codefile .kw81 {color: #003399; font-weight: bold;}
.codefile .kw82 {color: #003399; font-weight: bold;}
.codefile .kw83 {color: #003399; font-weight: bold;}
.codefile .kw84 {color: #003399; font-weight: bold;}
.codefile .kw85 {color: #003399; font-weight: bold;}
.codefile .kw86 {color: #003399; font-weight: bold;}
.codefile .kw87 {color: #003399; font-weight: bold;}
.codefile .kw88 {color: #003399; font-weight: bold;}
.codefile .kw89 {color: #003399; font-weight: bold;}
.codefile .kw90 {color: #003399; font-weight: bold;}
.codefile .kw91 {color: #003399; font-weight: bold;}
.codefile .kw92 {color: #003399; font-weight: bold;}
.codefile .kw93 {color: #003399; font-weight: bold;}
.codefile .kw94 {color: #003399; font-weight: bold;}
.codefile .kw95 {color: #003399; font-weight: bold;}
.codefile .kw96 {color: #003399; font-weight: bold;}
.codefile .kw97 {color: #003399; font-weight: bold;}
.codefile .kw98 {color: #003399; font-weight: bold;}
.codefile .kw99 {color: #003399; font-weight: bold;}
.codefile .kw100 {color: #003399; font-weight: bold;}
.codefile .kw101 {color: #003399; font-weight: bold;}
.codefile .kw102 {color: #003399; font-weight: bold;}
.codefile .kw103 {color: #003399; font-weight: bold;}
.codefile .kw104 {color: #003399; font-weight: bold;}
.codefile .kw105 {color: #003399; font-weight: bold;}
.codefile .kw106 {color: #003399; font-weight: bold;}
.codefile .kw107 {color: #003399; font-weight: bold;}
.codefile .kw108 {color: #003399; font-weight: bold;}
.codefile .kw109 {color: #003399; font-weight: bold;}
.codefile .kw110 {color: #003399; font-weight: bold;}
.codefile .kw111 {color: #003399; font-weight: bold;}
.codefile .kw112 {color: #003399; font-weight: bold;}
.codefile .kw113 {color: #003399; font-weight: bold;}
.codefile .kw114 {color: #003399; font-weight: bold;}
.codefile .kw115 {color: #003399; font-weight: bold;}
.codefile .kw116 {color: #003399; font-weight: bold;}
.codefile .kw117 {color: #003399; font-weight: bold;}
.codefile .kw118 {color: #003399; font-weight: bold;}
.codefile .kw119 {color: #003399; font-weight: bold;}
.codefile .kw120 {color: #003399; font-weight: bold;}
.codefile .kw121 {color: #003399; font-weight: bold;}
.codefile .kw122 {color: #003399; font-weight: bold;}
.codefile .kw123 {color: #003399; font-weight: bold;}
.codefile .kw124 {color: #003399; font-weight: bold;}
.codefile .kw125 {color: #003399; font-weight: bold;}
.codefile .kw126 {color: #003399; font-weight: bold;}
.codefile .kw127 {color: #003399; font-weight: bold;}
.codefile .kw128 {color: #003399; font-weight: bold;}
.codefile .kw129 {color: #003399; font-weight: bold;}
.codefile .kw130 {color: #003399; font-weight: bold;}
.codefile .kw131 {color: #003399; font-weight: bold;}
.codefile .kw132 {color: #003399; font-weight: bold;}
.codefile .kw133 {color: #003399; font-weight: bold;}
.codefile .kw134 {color: #003399; font-weight: bold;}
.codefile .kw135 {color: #003399; font-weight: bold;}
.codefile .kw136 {color: #003399; font-weight: bold;}
.codefile .kw137 {color: #003399; font-weight: bold;}
.codefile .kw138 {color: #003399; font-weight: bold;}
.codefile .kw139 {color: #003399; font-weight: bold;}
.codefile .kw140 {color: #003399; font-weight: bold;}
.codefile .kw141 {color: #003399; font-weight: bold;}
.codefile .kw142 {color: #003399; font-weight: bold;}
.codefile .kw143 {color: #003399; font-weight: bold;}
.codefile .kw144 {color: #003399; font-weight: bold;}
.codefile .kw145 {color: #003399; font-weight: bold;}
.codefile .kw146 {color: #003399; font-weight: bold;}
.codefile .kw147 {color: #003399; font-weight: bold;}
.codefile .kw148 {color: #003399; font-weight: bold;}
.codefile .kw149 {color: #003399; font-weight: bold;}
.codefile .kw150 {color: #003399; font-weight: bold;}
.codefile .kw151 {color: #003399; font-weight: bold;}
.codefile .kw152 {color: #003399; font-weight: bold;}
.codefile .kw153 {color: #003399; font-weight: bold;}
.codefile .kw154 {color: #003399; font-weight: bold;}
.codefile .kw155 {color: #003399; font-weight: bold;}
.codefile .kw156 {color: #003399; font-weight: bold;}
.codefile .kw157 {color: #003399; font-weight: bold;}
.codefile .kw158 {color: #003399; font-weight: bold;}
.codefile .kw159 {color: #003399; font-weight: bold;}
.codefile .kw160 {color: #003399; font-weight: bold;}
.codefile .kw161 {color: #003399; font-weight: bold;}
.codefile .kw162 {color: #003399; font-weight: bold;}
.codefile .kw163 {color: #003399; font-weight: bold;}
.codefile .kw164 {color: #003399; font-weight: bold;}
.codefile .kw165 {color: #003399; font-weight: bold;}
.codefile .kw166 {color: #003399; font-weight: bold;}
.codefile .co1,
.codefile .co2,
.codefile .co3,
.codefile .coMULTI {color: #a1a100;}

/*
.codefile .co2 {color: #ff0000; font-style: italic;}
.codefile .co3 {color: #008000; font-style: italic;}
.codefile .coMULTI {color: #808080; font-style: italic;}
*/
.codefile .es0 {color: #000099; font-weight: bold;}
.codefile .es2 {color: #000099; font-weight: bold;}
.codefile .br0 {color: #00AA00;}
.codefile .sy0 {color: #00AA00;}
.codefile .st0 {color: #aa0000;}
.codefile .nu0 {color: #cc66cc;}
.codefile .re0 {color: #cc00cc;}
.codefile .re1 {color: #6666ff;}
.codefile .re2 {color: #3333ff;}
.codefile .re3 {color: #933;}
.codefile .ln-xtra, .codefile li.ln-xtra, .codefile div.ln-xtra {background-color: #ffc;}
.codefile span.xtra { display:block; }
.codefile .sc-2 {color: #404040;}
.codefile .sc-1 {color: #808080; font-style: italic;}
.codefile .sc0 {color: #00bbdd;}
.codefile .sc1 {color: #ddbb00;}
.codefile .sc2 {color: #009900;}
		</style>

		<style type="text/css" media="print">
.codefile {
	border: 1px dashed #2F6FAB;
}

.codefile pre, .codefile xmp {
	font-size: 9pt;
	letter-spacing: -0.5pt;
	line-height: 1em;
	margin: 0;
	padding: 0.25em;
	overflow: hidden;
}

.saveforyourrecords, .tooltip {
	display: none;
}
		</style>
	</head>

	<body>
		<h1>Homework Turnin</h1>


<div id="main">
	<h2 id="studentinfoheader">
		<span class="columnlabel">Name:</span>
		Nadia		Arfin		Kazi		<br>

		<span class="columnlabel">Email:</span>
		nadiak3@uw.edu		<br>
		
					<span class="columnlabel">Student ID:</span>
			1162405			<br>
		
					<span class="columnlabel">Section:</span>
			MJ			<br>
		
		<span class="columnlabel">Course:</span>
		CSE 		190m		12sp		<br>

		<span class="columnlabel">Assignment:</span>
		hw7	</h2>


	<h2 id="studentinfoheader">
		<span class="columnlabel">Receipt ID:</span>
		58f403e7b677733008c2bb068fc10714	</h2>

	
	<div class="warning">
		<p>
			<strong>Warning:</strong> Your turnin is 1 day late.  Assignment hw7 was due Wednesday, May 16, 2012, 11:30 PM.		</p>
	</div>
	
		
	<p>
		Replacing prior submission from Thu 2012/05/17 10:31pm.
	</p>
	
	
<!--
<div class="warning">
	NOTE: Emailed receipts temporarily disabled because of a server problem.  Please save a copy of this web page because you won't be receiving a receipt email.
</div>
-->

	
	<h3 class="success">Turnin Successful!</h3>

	<p class="saveforyourrecords">
		Please <strong style="color: #090; background-color: #ffb">save or print a copy of this page</strong>
 for your records.  A receipt has also been emailed to you, but you 
should still save or print a copy of this web page to make certain that 
you have proof of your turnin.  <strong>If your files become lost or 
damaged and you do not have any record of your receipt, we will not be 
able to give you any credit for your work.</strong>
	</p>
	
		
	<p>
		The following file(s) were received:
	</p>

	

		<div class="codefile">
			<h2>
				fifteen.js &nbsp; &nbsp; 
				<span class="aside">(4005 bytes)</span>
			</h2>
			
			<pre><pre class="ecmascript"><span class="coMULTI">/*
Nadia Kazi, CSE 190M
May 16, 2012, Section MJ
The purpose of this file is to produce a game called Fifteen puzzle. When a user 
touch a tile it produces a certain behavior. For instance, the tile might move,
the tile might not move, shuffle all the tiles randomly and so on.
The fifteen puzzle is a 4x4 grid of numbered square with one square missing. 
The purpose of this game is to arrange the tiles into numerical order by repeatedly
sibling a square that neighbor the missing square into its empty space. 
*/</span>
&nbsp;
<span class="st0">"use strict"</span><span class="sy0">;</span>
<span class="kw2">var</span> row <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span>        <span class="co1">// row/column of the empty square's</span>
<span class="kw2">var</span> column <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">;</span>
&nbsp;
window<span class="sy0">.</span><span class="me1">onload</span> <span class="sy0">=</span> <span class="kw2">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    arrangeTiles<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
    setsId<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
    $<span class="br0">(</span><span class="st0">"shufflebutton"</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">observe</span><span class="br0">(</span><span class="st0">"click"</span><span class="sy0">,</span> shuffleTiles<span class="br0">)</span><span class="sy0">;</span> 
<span class="br0">}</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// It sets the different parts of the background image to each square pieces on a 4x4 grid </span>
<span class="kw2">function</span> arrangeTiles<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw2">var</span> tile <span class="sy0">=</span> $$<span class="br0">(</span><span class="st0">"#puzzlearea div"</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
    <span class="kw2">for</span> <span class="br0">(</span><span class="kw2">var</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> tile<span class="sy0">.</span><span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">var</span> x <span class="sy0">=</span> i <span class="sy0">%</span> <span class="nu0">4</span> <span class="sy0">*</span> <span class="nu0">100</span><span class="sy0">;</span>        
        <span class="kw2">var</span> y <span class="sy0">=</span> <span class="kw7">parseInt</span><span class="br0">(</span>i <span class="sy0">/</span> <span class="nu0">4</span><span class="br0">)</span> <span class="sy0">*</span> <span class="nu0">100</span><span class="sy0">;</span>
        tile<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">.</span><span class="me1">style</span><span class="sy0">.</span><span class="me1">left</span> <span class="sy0">=</span> x <span class="sy0">+</span> <span class="st0">"px"</span><span class="sy0">;</span>
        tile<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">.</span><span class="me1">style</span><span class="sy0">.</span><span class="me1">top</span> <span class="sy0">=</span> y <span class="sy0">+</span> <span class="st0">"px"</span><span class="sy0">;</span>
        tile<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">.</span><span class="me1">style</span><span class="sy0">.</span><span class="me1">backgroundPosition</span> <span class="sy0">=</span> <span class="br0">(</span><span class="sy0">-</span>x<span class="br0">)</span> <span class="sy0">+</span> <span class="st0">"px"</span> <span class="sy0">+</span> <span class="st0">" "</span> <span class="sy0">+</span> <span class="br0">(</span><span class="sy0">-</span>y<span class="br0">)</span> <span class="sy0">+</span> <span class="st0">"px"</span><span class="sy0">;</span> 
    <span class="br0">}</span>   
<span class="br0">}</span>
&nbsp;
<span class="co1">// it sets id for each squares using the row and column of the square </span>
<span class="kw2">function</span> setsId<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw2">var</span> squarearea <span class="sy0">=</span> $$<span class="br0">(</span><span class="st0">"#puzzlearea div"</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="kw2">for</span><span class="br0">(</span><span class="kw2">var</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> squarearea<span class="sy0">.</span><span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span>
&nbsp;
        <span class="kw2">var</span> x  <span class="sy0">=</span> <span class="br0">(</span>i <span class="sy0">%</span> <span class="nu0">4</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="kw2">var</span> y <span class="sy0">=</span> <span class="kw7">parseInt</span><span class="br0">(</span>i <span class="sy0">/</span> <span class="nu0">4</span><span class="br0">)</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>    
&nbsp;
        checkTiles<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>   <span class="co1">// updates the movable square</span>
        squarearea<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">.</span><span class="me1">id</span> <span class="sy0">=</span> <span class="st0">"square_"</span> <span class="sy0">+</span> x <span class="sy0">+</span> <span class="st0">"_"</span> <span class="sy0">+</span> y<span class="sy0">;</span>  <span class="co1">//sets id's for the x and y values </span>
        squarearea<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">.</span><span class="me1">observe</span><span class="br0">(</span><span class="st0">"click"</span><span class="sy0">,</span> tileMouseClick<span class="br0">)</span><span class="sy0">;</span>    
        squarearea<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">.</span><span class="me1">observe</span><span class="br0">(</span><span class="st0">"mouseover"</span><span class="sy0">,</span>  checkTiles<span class="br0">)</span><span class="sy0">;</span>
    <span class="br0">}</span>   
<span class="br0">}</span>
&nbsp;
<span class="co1">// it checks if the square can be move and if so then it </span>
<span class="co1">// hovers over the square </span>
<span class="kw2">function</span> checkTiles<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw2">var</span> squarearea <span class="sy0">=</span> $$<span class="br0">(</span><span class="st0">"#puzzlearea div"</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
    <span class="kw2">for</span><span class="br0">(</span><span class="kw2">var</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> squarearea<span class="sy0">.</span><span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">if</span><span class="br0">(</span>canMove<span class="br0">(</span>squarearea<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>        
            squarearea<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">.</span><span class="me1">addClassName</span><span class="br0">(</span><span class="st0">"hover"</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="br0">}</span> <span class="kw2">else</span> <span class="br0">{</span>
            squarearea<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">.</span><span class="me1">removeClassName</span><span class="br0">(</span><span class="st0">"hover"</span><span class="br0">)</span><span class="sy0">;</span> 
        <span class="br0">}</span>
    <span class="br0">}</span>
<span class="br0">}</span>
&nbsp;
<span class="co1">// it takes event as a parameter and call the moveOneTile</span>
<span class="co1">// the function tileMouseClick is only runs whenever a</span>
<span class="co1">// user click is observed.  </span>
<span class="kw2">function</span> tileMouseClick<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    moveOneTile<span class="br0">(</span><span class="kw2">this</span><span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span>
&nbsp;
<span class="co1">// checks if a tile can move then it moves the square to the </span>
<span class="co1">// empty spaces  </span>
<span class="kw2">function</span> moveOneTile<span class="br0">(</span>tile<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw2">var</span> tileLeft <span class="sy0">=</span> tile<span class="sy0">.</span><span class="me1">getStyle</span><span class="br0">(</span><span class="st0">"left"</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="kw2">var</span> tileTop <span class="sy0">=</span> tile<span class="sy0">.</span><span class="me1">getStyle</span><span class="br0">(</span><span class="st0">"top"</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="kw2">if</span><span class="br0">(</span>canMove<span class="br0">(</span>tile<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
&nbsp;
        tile<span class="sy0">.</span><span class="me1">style</span><span class="sy0">.</span><span class="me1">left</span> <span class="sy0">=</span> <span class="kw7">parseInt</span><span class="br0">(</span>row <span class="sy0">*</span> <span class="nu0">100</span><span class="br0">)</span> <span class="sy0">+</span> <span class="st0">"px"</span><span class="sy0">;</span>
        tile<span class="sy0">.</span><span class="me1">style</span><span class="sy0">.</span><span class="me1">top</span> <span class="sy0">=</span> <span class="kw7">parseInt</span><span class="br0">(</span>column <span class="sy0">*</span> <span class="nu0">100</span><span class="br0">)</span> <span class="sy0">+</span> <span class="st0">"px"</span><span class="sy0">;</span>
&nbsp;
        row <span class="sy0">=</span> tileLeft<span class="sy0">;</span>
        column <span class="sy0">=</span> tileTop<span class="sy0">;</span>
        row <span class="sy0">=</span> <span class="kw7">parseInt</span><span class="br0">(</span>row<span class="br0">)</span> <span class="sy0">/</span> <span class="nu0">100</span><span class="sy0">;</span>
        column <span class="sy0">=</span> <span class="kw7">parseInt</span><span class="br0">(</span>column<span class="br0">)</span> <span class="sy0">/</span> <span class="nu0">100</span><span class="sy0">;</span>
        checkTiles<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span> <span class="co1">// updates the movable square</span>
    <span class="br0">}</span>
<span class="br0">}</span>
&nbsp;
<span class="co1">// it checks if the given square is a neighboring square with the </span>
<span class="co1">// empty square. if so the it return true otherwise false.  </span>
<span class="kw2">function</span> canMove<span class="br0">(</span>tile<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw2">var</span> tileLeft <span class="sy0">=</span> tile<span class="sy0">.</span><span class="me1">getStyle</span><span class="br0">(</span><span class="st0">"left"</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="kw2">var</span> tileTop <span class="sy0">=</span> tile<span class="sy0">.</span><span class="me1">getStyle</span><span class="br0">(</span><span class="st0">"top"</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="co1">// dx and dy are difference between the current square and the the empty</span>
    <span class="co1">// square's row and column</span>
    <span class="kw2">var</span> dx <span class="sy0">=</span> <span class="kw5">Math</span><span class="sy0">.</span><span class="me1">abs</span><span class="br0">(</span><span class="kw7">parseInt</span><span class="br0">(</span>tileLeft<span class="br0">)</span> <span class="sy0">-</span> row <span class="sy0">*</span> <span class="nu0">100</span><span class="br0">)</span><span class="sy0">;</span>       
    <span class="kw2">var</span> dy <span class="sy0">=</span> <span class="kw5">Math</span><span class="sy0">.</span><span class="me1">abs</span><span class="br0">(</span><span class="kw7">parseInt</span><span class="br0">(</span>tileTop<span class="br0">)</span> <span class="sy0">-</span> column <span class="sy0">*</span> <span class="nu0">100</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
    <span class="co1">// checks if the difference in row is 100 and difference in column is 0 or not</span>
    <span class="kw2">if</span><span class="br0">(</span><span class="br0">(</span>dx <span class="sy0">==</span> <span class="nu0">100</span><span class="br0">)</span> <span class="sy0">&amp;&amp;</span> <span class="br0">(</span>dy <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span> <span class="br0">)</span> <span class="br0">{</span> 
        <span class="kw2">return</span> <span class="kw1">true</span><span class="sy0">;</span>
    <span class="br0">}</span> <span class="kw2">else</span> <span class="kw2">if</span><span class="br0">(</span><span class="br0">(</span>dx <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span> <span class="sy0">&amp;&amp;</span> <span class="br0">(</span>dy <span class="sy0">==</span> <span class="nu0">100</span><span class="br0">)</span><span class="br0">)</span><span class="br0">{</span>
        <span class="kw2">return</span> <span class="kw1">true</span><span class="sy0">;</span>
    <span class="br0">}</span> <span class="kw2">else</span> <span class="br0">{</span>
        <span class="kw2">return</span> <span class="kw1">false</span><span class="sy0">;</span>
    <span class="br0">}</span>
<span class="br0">}</span>
&nbsp;
&nbsp;
<span class="co1">// it puts the squares into an array and randomly chooses one square</span>
<span class="kw2">function</span> randomlyChosenElement<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw2">var</span> tile <span class="sy0">=</span> $$<span class="br0">(</span><span class="st0">".hover"</span><span class="br0">)</span><span class="sy0">;</span>    <span class="co1">// stores the array of squares that can move</span>
    moveOneTile<span class="br0">(</span>tile<span class="br0">[</span><span class="kw7">parseInt</span><span class="br0">(</span>tile<span class="sy0">.</span><span class="me1">length</span> <span class="sy0">*</span> <span class="kw5">Math</span><span class="sy0">.</span><span class="me1">random</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span>   <span class="co1">// randomizes the value</span>
<span class="br0">}</span>   
&nbsp;
<span class="co1">// shuffles all the tiles in the grid by 200 times, initally.</span>
 <span class="kw2">function</span> shuffleTiles<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>      
    <span class="kw2">for</span><span class="br0">(</span><span class="kw2">var</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">200</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span>
        randomlyChosenElement<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>        
    <span class="br0">}</span>
 <span class="br0">}</span>
&nbsp;</pre></pre>
		</div>

		
		<div class="codefile">
			<h2>
				fifteen.css &nbsp; &nbsp; 
				<span class="aside">(568 bytes)</span>
			</h2>
			
			<pre><pre class="css"><span class="coMULTI">/*
Nadia Kazi, CSE 190M
May 16, 2012, Section MJ
The purpose of this file is to style the Fifteen puzzle webpage.   
*/</span>
&nbsp;
body<span class="sy0">,</span> <span class="re0">#shufflebutton</span>  <span class="br0">{</span>
    <span class="kw1">font-family</span><span class="sy0">:</span> <span class="kw2">cursive</span><span class="sy0">;</span>
    <span class="kw1">font-size</span><span class="sy0">:</span> <span class="re3">14pt</span><span class="sy0">;</span>
    <span class="kw1">text-align</span><span class="sy0">:</span> <span class="kw2">center</span><span class="sy0">;</span>
<span class="br0">}</span>
&nbsp;
<span class="re0">#puzzlearea</span> <span class="br0">{</span>
    <span class="kw1">margin-left</span><span class="sy0">:</span> <span class="kw2">auto</span><span class="sy0">;</span>
    <span class="kw1">margin-right</span><span class="sy0">:</span> <span class="kw2">auto</span><span class="sy0">;</span>
    <span class="kw1">width</span><span class="sy0">:</span> <span class="re3">400px</span><span class="sy0">;</span>
    <span class="kw1">height</span><span class="sy0">:</span> <span class="re3">400px</span><span class="sy0">;</span>
    <span class="kw1">position</span><span class="sy0">:</span> <span class="kw2">relative</span><span class="sy0">;</span> 
<span class="br0">}</span>
&nbsp;
<span class="re0">#puzzlearea</span> div <span class="br0">{</span>
    <span class="kw1">width</span><span class="sy0">:</span> <span class="re3">90px</span><span class="sy0">;</span>
    <span class="kw1">height</span><span class="sy0">:</span> <span class="re3">90px</span><span class="sy0">;</span>
    <span class="kw1">border</span><span class="sy0">:</span> <span class="re3">5px</span> <span class="kw2">solid</span><span class="sy0">;</span>
    <span class="kw1">font-size</span><span class="sy0">:</span> <span class="re3">40pt</span><span class="sy0">;</span>    
    <span class="kw1">position</span><span class="sy0">:</span> <span class="kw2">absolute</span><span class="sy0">;</span>
    <span class="kw1">background-image</span><span class="sy0">:</span> <span class="kw2">url</span><span class="br0">(</span><span class="st0">'background.jpg'</span><span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span>
&nbsp;
<span class="re1">.hover</span><span class="re2">:hover </span><span class="br0">{</span>
    <span class="kw1">color</span><span class="sy0">:</span> <span class="kw2">red</span><span class="sy0">;</span>
    <span class="kw1">border</span><span class="sy0">:</span> <span class="kw2">red</span><span class="sy0">;</span>
<span class="br0">}</span>
&nbsp;</pre></pre>
		</div>

		
		<div class="codefile">
			<h2>
				background.jpg &nbsp; &nbsp; 
				<span class="aside">(42020 bytes)</span>
			</h2>
			
			<pre>(binary file)</pre>
		</div>

		
</div>


	<div id="loading">One moment...</div>
	<pre id="dumptarget"></pre>
	
	
	

	</body></html>